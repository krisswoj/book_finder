#spring.datasource.url=${JDBC_DATABASE_URL}
#spring.datasource.username=${JDBC_DATABASE_USERNAME}
#spring.datasource.password=${JDBC_DATABASE_PASSWORD}
#spring.jpa.show-sql=false
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update


spring.datasource.url = jdbc:mysql://localhost/books
spring.datasource.username = root
spring.datasource.password =

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

ALLEGRO_BOOK_CATEGORY=38d588fd-7e9c-4c42-a4ae-6831775eca45
ALLEGRO_API_CLIENT_ID=400835dce55c45c28df2f6ee11551b0c
ALLEGRO_API_CLIENT_SECRET=5oWyDiFwcADkyDlz319XiYu2iWSmgERgzWuYpoHDJS6LG4j61W1CZozofxIRLMDJ
ALLEGRO_URL_TO_GET_TOKEN=https://allegro.pl/auth/oauth/token
ALLEGRO_URL_API_OFFERS=https://api.allegro.pl/offers/listing
ALLEGRO_URL_TO_AUTH=https://allegro.pl/auth/oauth/authorize
REDIRECT_MAIN_URL=https://book-finder-krisswoj.herokuapp.com
ALLEGRO_ACCEPT_API_IFNO=application/vnd.allegro.public.v1+json
GOOGLE_BOOKS_API_URL=https://www.googleapis.com/books/v1/volumes
JSON_CONTENT_TYPE=application/json

